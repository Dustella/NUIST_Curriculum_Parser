import * as cheerio from "cheerio";

function scheduleHtmlParser(html) {
  interface Lesson {
    name: string;
    position: string;
    teacher: string;
    weeks: number[];
    day: number;
    sections: number[];
  }

  enum parity {
    odd,
    even,
    both,
  }

  // a helper function to generate a continuous array
  const range = (start: number, end: number, p: parity = parity.both) =>
    Array.from({ length: end - start + 1 }, (_, i) => i + start).filter((i) => {
      if (p === parity.both) return true;
      if (p === parity.odd) return i % 2 === 1;
      if (p === parity.even) return i % 2 === 0;
    });

  const mapper = {
    begin: [
      "08:00",
      "08:55",
      "10:10",
      "11:05",
      "13:45",
      "14:40",
      "15:55",
      "16:50",
      "18:45",
      "19:40",
      "20:35",
    ],
    end: [
      "08:45",
      "09:40",
      "10:55",
      "11:50",
      "14:30",
      "15:25",
      "16:40",
      "17:35",
      "19:30",
      "20:25",
      "21:20",
    ],
  };

  // example text:
  // "18周,星期1,08:00-09:40,长望楼206",
  // "2-16周(双),星期1,第5节-第6节,信科楼B111",
  // "2-10周(双),16周,星期2,第7节-第8节,揽江楼N413"
  const parseDetail = (text: string) => {
    const weeks = [];
    const sections = [];
    let day = 0;
    let position = "";

    text.split(",").forEach((param, index) => {
      // if param contains "周", it's the week param
      if (param.includes("周")) {
        // judge if it's a continuous week, odd week contians "单", even week contains "双"
        const p = param.includes("单")
          ? parity.odd
          : param.includes("双")
          ? parity.even
          : parity.both;
        const [start, end] = param.split("周")[0].split("-").map(Number);
        if (end) {
          weeks.push(...range(start, end, p));
        } else {
          weeks.push(start);
        }
      }
      // if param contains "星期", it's the day param
      if (param.includes("星期")) {
        day = Number(param.split("星期")[1]);
      }
      // if param contains "节", it's the section param
      if (param.includes("节")) {
        const [start, end] = param
          .split("-")
          .map((i) => Number(i.replace("第", "").replace("节", "")));
        sections.push(...range(start, end));
      }
      // in some cases, sections are not generated by "节", but by time like "08:00-09:40"
      // use regex to match the time pattern xx:xx-xx:xx
      if (param.match(/\d{2}:\d{2}-\d{2}:\d{2}/)) {
        const [start_time, end_time] = param.split("-");
        // use mapper to get exact section number
        const start = mapper.begin.indexOf(start_time) + 1;
        const end = mapper.end.indexOf(end_time) + 1;
        if (start == end) {
          sections.push(start);
        } else {
          sections.push(...range(start, end));
        }
      }
      // the position is always the last param
      if (index === text.split(",").length - 1) {
        position = param;
      }
    });

    return { weeks, day, position, sections };
  };

  const merge = (lessons: Lesson[]): Lesson[] => {
    // this helper function is going to merge lessons at the same time
    // the lessons getting in is lessons in particular day and particular section
    // we will make sure that in each week there is only one lesson at a time
    const result = lessons.reduce((acc, cur) => {
      const {
        name: nameCurrent,
        teacher: teacherCurrent,
        position: positionCurrent,
        weeks: weeksCurrent,
        day: dayCurrent,
        sections: sectionsCurrent,
      } = cur;

      const conflictMapper: Record<number, number> = {}; // key is single week, value is index of acc

      weeksCurrent.forEach((week) => {
        const index = acc.findIndex((i) => i.weeks.includes(week));
        if (index !== -1) {
          conflictMapper[week] = index;
        }
      });
      if (Object.keys(conflictMapper).length === 0) {
        // this means there is no conflict, just push the lesson into acc
        acc.push(cur);
      } else {
        // first, reverse the conflictMapper to another object, key is index of acc, value is week array
        const indexTowWeekArrayMapper = Object.entries(conflictMapper).reduce(
          (acc, [week, index]) => {
            if (!acc[index]) {
              acc[index] = [];
            }
            acc[index].push(Number(week));
            return acc;
          },
          {} as Record<number, number[]>
        );
        // console.log(`conflict, day ${dayCurrent}, section ${sectionsCurrent}`);
        // console.log(indexTowWeekArrayMapper);
        // then, change every lesson in acc that has conflict, erase the weeks that has conflict
        Object.entries(indexTowWeekArrayMapper).forEach(
          ([conflictIndex, conflictWeeks]) => {
            const conflictLessonInCur = acc[Number(conflictIndex)];
            // if conflict weeks is only part of the weeks in conflict lesson,
            // we just modify the weeks in conflict lesson
            if (conflictWeeks.length < conflictLessonInCur.weeks.length) {
              conflictLessonInCur.weeks = conflictLessonInCur.weeks.filter(
                (i) => !conflictWeeks.includes(i)
              );
            }
            // if conflict weeks is all the weeks in conflict lesson,
            // we just delete the conflict lesson
            if (conflictWeeks.length === conflictLessonInCur.weeks.length) {
              acc.splice(Number(conflictIndex), 1);
            }
            // if conflict weeks is part of current lesson,
            // we have to create a new lesson for the weeks part
            if (conflictWeeks.length < weeksCurrent.length) {
              acc.push({
                name: nameCurrent,
                position: positionCurrent,
                teacher: teacherCurrent,
                weeks: weeksCurrent.filter((i) => !conflictWeeks.includes(i)),
                day: dayCurrent,
                sections: sectionsCurrent,
              });
            }
            // create a merged lesson for the weeks part, and push it into acc
            if (teacherCurrent === conflictLessonInCur.teacher) {
              acc.push({
                name: nameCurrent,
                position: positionCurrent,
                teacher: teacherCurrent,
                weeks: conflictWeeks,
                day: dayCurrent,
                sections: sectionsCurrent,
              });
            } else {
              acc.push({
                name: `${nameCurrent} ${conflictLessonInCur.name}`,
                position: `${positionCurrent} ${conflictLessonInCur.position}`,
                teacher: `${teacherCurrent} ${conflictLessonInCur.teacher}`,
                weeks: conflictWeeks,
                day: dayCurrent,
                sections: sectionsCurrent,
              });
            }
          }
        );
      }

      return acc;
    }, [] as Lesson[]);

    return result;
  };

  const merger = (raw: Lesson[]): Lesson[] => {
    // in some cases, in one day in a particular week, there are more than one lesson at a time
    // we will scan throgh week 1-20, then scan through day 1-7, then scan through section 1-11
    // to find out if there are more than one lesson at a time
    // if there are, we will merge them into one lesson
    // this function is going to scan through all the lessons and merge them
    const result = [];
    for (let day = 1; day <= 7; day++) {
      for (let section = 1; section <= 11; section += 2) {
        const lessons = raw.filter(
          (i) => i.day === day && i.sections.includes(section)
        );
        const merged = merge(lessons);
        result.push(...merged);
      }
    }
    return result;
  };

  const parser = (instance: cheerio.CheerioAPI): Lesson[] =>
    instance(".mtt_arrange_item")
      .map((number, ele) => {
        const name = instance(ele).find(".mtt_item_kcmc").text().split(" ")[0];
        // const name = instance(ele).find(".mtt_item_kcmc").text();
        const teacher = instance(ele).find(".mtt_item_jxbmc").text();
        const details = instance(ele).find(".mtt_item_room").text();
        const { weeks, day, position, sections } = parseDetail(details);
        return {
          name,
          position,
          teacher,
          weeks,
          day,
          sections,
        };
      })
      .toArray();

  const $ = cheerio.load(html, {
    decodeEntities: false,
  });

  const raw = parser($);
  const result = merger(raw);

  return result;
}

async function test() {
  const fs = await import("fs");

  // use sync fs to read text from file content.txt
  const text = fs.readFileSync("./content.txt", "utf8");
  const result = scheduleHtmlParser(text);
  // write result to res.json
  fs.writeFileSync("./res.json", JSON.stringify(result));
}

test();
